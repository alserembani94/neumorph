{"version":3,"sources":["assets/images/logo-alserembani.svg","utils/Images.tsx","components/Layout/Menu.tsx","components/Layout/Header.tsx","pages/Home/index.tsx","pages/404/index.tsx","routers/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Images","logo","require","menuNav","path","label","Menu","visible","toggleVisibility","history","useHistory","handleNavigation","route","push","Fragment","className","data-visible","onClick","src","alt","map","menuItem","index","Header","React","useState","toggleMenu","setToggleMenu","handleMenuVisibility","prevState","Provider","value","HomeScreen","NotFound","routes","exact","main","Home","Layout","key","children","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ddb42138.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-alserembani.ccece5b3.svg\";","export const Images = {\n    logo: require('../assets/images/logo-alserembani.svg'),\n};","import React from 'react';\nimport {\n    useHistory,\n} from 'react-router-dom';\nimport {\n    Images,\n} from '../../utils/Images';\n\ninterface MenuProps {\n    visible: boolean;\n    toggleVisibility: () => void;\n}\n\nconst menuNav = [\n    {\n        path: '/neumorph/',\n        label: 'Home',\n    },\n    {\n        path: '/neumorph/about',\n        label: 'About',\n    },\n    {\n        path: '/neumorph/projects',\n        label: 'Projects',\n    },\n    {\n        path: '/neumorph/contact',\n        label: 'Finding Me?',\n    },\n];\n\nconst Menu: React.FC<MenuProps> = ({ visible, toggleVisibility }) => {\n    const history = useHistory();\n\n    const handleNavigation = (route: string) => {\n        history.push(route);\n        toggleVisibility();\n    };\n\n    return (\n        <React.Fragment>\n            <section className=\"Menu-Wrapper\" data-visible={visible} onClick={toggleVisibility}>\n            </section>\n            <section className=\"Menu-Container\" data-visible={visible}>\n                <button\n                    className=\"Menu-Logo\"\n                    onClick={() => handleNavigation('/')}\n                >\n                    <img\n                        src={Images.logo}\n                        alt=\"Logo-Serembani\"\n                    />\n                </button>\n                <div className=\"Menu-Drawer\">\n                    {/* <button className=\"Menu-Button\">\n                        Hello\n                    </button> */}\n                    {\n                        menuNav.map((menuItem, index) => (\n                            <button\n                                className=\"Menu-Button\"\n                                onClick={() => handleNavigation(menuItem.path)}\n                            >{menuItem.label}</button>\n                        ))\n                    }\n                </div>\n            </section>\n        </React.Fragment>\n    );\n};\n\nexport default Menu;","import React from 'react';\nimport {\n    IoIosMenu,\n} from 'react-icons/io';\nimport { IconContext } from \"react-icons\";\nimport Menu from './Menu';\n\nconst Header: React.FC = () => {\n    const [toggleMenu, setToggleMenu] = React.useState<boolean>(false);\n\n    const handleMenuVisibility = () => {\n        setToggleMenu(prevState => { return !prevState });\n    };\n\n    return (\n        <React.Fragment>\n            <header>\n                <button className=\"Header-MenuButton\" onClick={handleMenuVisibility}>\n                    <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Menu' }}>\n                        <IoIosMenu />\n                    </IconContext.Provider>\n                </button>\n            </header>\n            <Menu\n                visible={toggleMenu}\n                toggleVisibility={handleMenuVisibility}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default Header;","import React from 'react';\n\nconst HomeScreen = () => {\n    return (\n        <React.Fragment>\n            <main className=\"Home\">\n                <div className=\"Home-Project\">\n                    <p className=\"Home-Title\">My Home Playground</p>\n                    <p className=\"Home-Description\">by al-Serembani</p>\n                </div>\n                <div className=\"Neumorph-Wrapper\">\n                    <div className=\"Neumorph-Element Neumorph-Outside\">Outside Shadow</div>\n                    <div className=\"Neumorph-Element Neumorph-Inside\">Inside Shadow</div>\n                    <div className=\"Neumorph-Element Neumorph-Outside-Hover\">Hover</div>\n                    <div className=\"Neumorph-Element Neumorph-Outside-After\">Hover Animation</div>\n                </div>\n            </main>\n        </React.Fragment>\n    );\n};\n\nexport default HomeScreen;","import React from 'react';\nimport {\n    IoIosFlask,\n} from 'react-icons/io';\nimport { IconContext } from \"react-icons\";\n\nconst NotFound = () => {\n    return (\n        <React.Fragment>\n            <main className=\"NotFound-Screen\">\n                <div className=\"NotFound-Title\">\n                    <IconContext.Provider value={{ className: 'Icon Icon-Tertiary Icon-NotFound' }}>\n                        <IoIosFlask />\n                    </IconContext.Provider>\n                    <p>You have wondered too far!</p>\n                    <IconContext.Provider value={{ className: 'Icon Icon-Tertiary Icon-NotFound' }}>\n                        <IoIosFlask />\n                    </IconContext.Provider>\n                </div>\n                <p>How about trying the other page instead?</p>\n            </main>\n        </React.Fragment>\n    );\n};\n\nexport default NotFound;","import React from 'react';\nimport {\n    Switch,\n    Route,\n} from 'react-router-dom';\n\n// Importing all main layout components\nimport {\n    Header,\n} from '../components';\n\n// Importing all main pages\nimport Home from '../pages/Home';\nimport NotFound from '../pages/404';\n\nconst routes = [\n    {\n        path: \"/neumorph/\",\n        exact: true,\n        main: () => <Home />\n    },\n    {\n        path: \"*\",\n        exact: false,\n        main: () => <NotFound />\n    },\n];\n\nconst Layout: React.FC = () => {\n    return (\n        <React.Fragment>\n            <div className=\"Layout-Wrapper\">\n                <Header />\n                <section className=\"Layout-Body\">\n                    <Switch>\n                        {\n                            routes.map((route, index) => (\n                                <Route\n                                    key={index}\n                                    path={route.path}\n                                    exact={route.exact}\n                                    children={<route.main />}\n                                />\n                            ))\n                        }\n                        {/* <Route path=\"/\" exact>\n                            <Home />\n                        </Route>\n                        <Route path=\"*\">\n                            <NotFound />\n                        </Route> */}\n                    </Switch>\n                </section>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Layout;","import React from 'react';\nimport './App.scss';\nimport {\n    BrowserRouter as Router,\n} from 'react-router-dom';\nimport Layout from './routers';\n\nfunction App() {\n    return (\n        <Router>\n            <Layout />\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n// serviceWorker.unregister();\n"],"sourceRoot":""}