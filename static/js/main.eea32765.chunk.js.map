{"version":3,"sources":["assets/images/logo-alserembani.svg","utils/Images.tsx","components/Layout/Menu.tsx","hooks/index.tsx","components/Layout/Header.tsx","pages/Home/index.tsx","pages/AboutUs/index.tsx","components/CustomComponent/Input.tsx","pages/DesignSystem/index.tsx","pages/404/index.tsx","pages/InProgress/index.tsx","routers/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Images","logo","require","menuNav","path","label","Menu","ref","handler","visible","closeModal","modalRef","React","useRef","history","useHistory","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","handleNavigation","route","push","Fragment","className","data-visible","onClick","src","alt","map","menuItem","index","key","Header","useState","toggleMenu","setToggleMenu","handleCloseMenu","Provider","value","HomeScreen","helmetConfig","mappedHelmetConfig","Object","entries","property","content","Helmet","charSet","name","AboutUs","role","aria-label","Input","type","onChange","inputClassName","labelClassName","placeholder","currentTarget","data-has-value","DesignSystem","inputValue","setInputValue","newValue","NotFound","InProgress","routes","exact","main","Home","Layout","children","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eea32765.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-alserembani.ccece5b3.svg\";","export const Images = {\n    logo: require('../assets/images/logo-alserembani.svg'),\n};","import React from 'react';\nimport {\n    useHistory,\n} from 'react-router-dom';\nimport {\n    Images,\n} from '../../utils/Images';\nimport {\n    useOnClickOutside,\n} from '../../hooks';\n\ninterface MenuProps {\n    visible: boolean;\n    closeModal: () => void;\n}\n\nconst menuNav = [\n    {\n        path: '/neumorph/',\n        label: 'Home',\n    },\n    {\n        path: '/neumorph/about',\n        label: 'About',\n    },\n    {\n        path: '/neumorph/design-system',\n        label: 'Design System',\n    },\n    {\n        path: '/neumorph/contact-me',\n        label: 'Finding Me?',\n    },\n];\n\nconst Menu: React.FC<MenuProps> = ({ visible, closeModal }) => {\n    const modalRef = React.useRef(null);\n    const history = useHistory();\n\n    useOnClickOutside(modalRef, closeModal);\n\n    const handleNavigation = (route: string) => {\n        history.push(route);\n        closeModal();\n    };\n\n    return (\n        <React.Fragment>\n            <section className=\"Menu-Wrapper\" data-visible={visible}>\n                <div className=\"Menu-Container\" data-visible={visible} ref={modalRef}>\n                    <button\n                        className=\"Menu-Logo\"\n                        onClick={() => handleNavigation('/')}\n                    >\n                        <img\n                            src={Images.logo}\n                            alt=\"Logo-Serembani\"\n                        />\n                    </button>\n                    <div className=\"Menu-Drawer\">\n                        {/* <button className=\"Menu-Button\">\n                            Hello\n                        </button> */}\n                        {\n                            menuNav.map((menuItem, index) => (\n                                <button\n                                    key={index}\n                                    className=\"Menu-Button\"\n                                    onClick={() => handleNavigation(menuItem.path)}\n                                >{menuItem.label}</button>\n                            ))\n                        }\n                    </div>\n                </div>\n            </section>\n        </React.Fragment>\n    );\n};\n\nexport default Menu;","import {\n    useEffect,\n    MutableRefObject,\n} from 'react';\n\n// Use this hook if want to handle clicks outside of an element\nexport const useOnClickOutside = (ref: MutableRefObject<HTMLElement | null>, handler: any) => {\n    useEffect(() => {\n        const listener = (event: any) => {\n            // Do nothing if clicking ref's element or descendent elements\n            if (!ref.current || ref.current.contains(event.target)) {\n                return;\n            }\n            handler(event);\n        };\n\n        // Start listening to mouse and touch event\n        document.addEventListener('mousedown', listener);\n        document.addEventListener('touchstart', listener);\n        \n        // Detach listeners after events\n        return () => {\n            document.removeEventListener('mousedown', listener);\n            document.removeEventListener('touchstart', listener);\n        };\n    },\n\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n    );\n};","import React from 'react';\nimport {\n    IoIosMenu,\n} from 'react-icons/io';\nimport { IconContext } from \"react-icons\";\nimport Menu from './Menu';\n\nconst Header: React.FC = () => {\n    const [toggleMenu, setToggleMenu] = React.useState<boolean>(false);\n\n    // const handleMenuVisibility = () => {\n    //     setToggleMenu(prevState => { return !prevState });\n    // };\n\n    const handleOpenMenu = () => setToggleMenu(() => true);\n    const handleCloseMenu = () => setToggleMenu(() => false);\n\n    return (\n        <React.Fragment>\n            <header>\n                <button className=\"Header-MenuButton\" onClick={toggleMenu ? handleCloseMenu : handleOpenMenu}>\n                    <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Menu' }}>\n                        <IoIosMenu />\n                    </IconContext.Provider>\n                </button>\n            </header>\n            <Menu\n                visible={toggleMenu}\n                closeModal={handleCloseMenu}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nconst HomeScreen = () => {\n    const helmetConfig = {\n        // Open Graph Configuration\n        \"og:title\": \"Web Title\",\n        \"og:url\": \"http://www.myowndomain.com\",\n        \"og:type\": \"website\", \n        \"og:description\": \"My neumorph playground, to test out my css skills to produce neumorph design systems.\", // 200 char only\n        \"og:image\": \"http://www.yourimageurl.com\",\n        \"og:audio\": \"http://www.youraudiourl.com\",\n        \"og:video\": \"http://www.yourvideourl.com\",\n        \"og:locale\": \"EN_US\",\n\n        // Twitter Card Configuration\n        \"twitter:title\": \"Web Title\",\n        \"twitter:url\": \"http://www.myowndomain.com\",\n        \"twitter:card\": \"website\", \n        \"twitter:description\": \"My neumorph playground, to test out my css skills to produce neumorph design systems.\", // 200 char only\n        \"twitter:image\": \"http://www.yourimageurl.com\",\n    };\n\n    const mappedHelmetConfig = [];\n    for (const [key, value] of Object.entries(helmetConfig)) {\n        mappedHelmetConfig.push(<meta property={key} content={value} />);\n    }\n\n    return (\n        <React.Fragment>\n            <main className=\"Home-Screen\">\n                <Helmet>\n                    {/* Modifying headers for the HTML for SEO */}\n                    <title>{helmetConfig[\"og:title\"]}</title>\n                    <meta charSet=\"utf-8\" />\n                    <meta name=\"author\" content=\"Atif Aiman al-Serembani\" />\n                    <meta name=\"description\" content={helmetConfig[\"og:description\"]} />\n                    { mappedHelmetConfig }\n\n                </Helmet>\n                <div className=\"Home-Project\">\n                    <p className=\"Home-Title\">My Home Playground</p>\n                    <p className=\"Home-Description\">by al-Serembani</p>\n                </div>\n                <div className=\"Neumorph-Wrapper\">\n                    <div className=\"Neumorph-Element Neumorph-Outside\">Outside Shadow</div>\n                    <div className=\"Neumorph-Element Neumorph-Inside\">Inside Shadow</div>\n                    <div className=\"Neumorph-Element Neumorph-Outside-Hover\">Hover</div>\n                    <div className=\"Neumorph-Element Neumorph-Outside-After\">Hover Animation</div>\n                </div>\n            </main>\n        </React.Fragment>\n    );\n};\n\nexport default HomeScreen;","import React from 'react';\n\n// Construct types for component props\ninterface AboutUsProps {\n    \n}\n\nconst AboutUs: React.FC<AboutUsProps> = () => {\n    return (\n        <React.Fragment>\n            <main className=\"AboutUs-Screen\">\n                <div className=\"AboutUs-Wrapper\">\n                    <h1>About My Neumorph Playground</h1>\n                    <div className=\"AboutUs-Content\">\n                        <p>\n                            Web designs has always been my passion. Writing high precision styling,\n                            exploring all possibilities with CSS, PostCSS, and for this page, SCSS,\n                            I would love to explore the capabilities for each library. And so, I developed\n                            a website for me to play with each of these libraries. And for this website, my\n                            take is <code>React</code>, <code>SCSS</code> and other libraries as well.\n                        </p>\n                        <p>\n                            So, for this, I choose neumorph design for this website. For me, neumorph is\n                            interesting since it involves playing with shadows to give a soft design, giving\n                            a 3D-like look to the containers and buttons, and can also be used to distinguish\n                            different usages and perceives towards each different element of the page.\n                        </p>\n                        <p>\n                            But note, <span>that neumorph is a soft design, so it is not that suitable for accessibility\n                            reason,</span> thus it is not a really good approach for website that aims for larger audience,\n                            while only providing cognitive experience that only has accessibility in slight color shade changes.\n                        </p>\n                        <p>\n                            Nonetheless, neumorph is interesting to explore, for its possibility in design\n                            along with other design approaches in modern web design as well. CSS plays an important\n                            role in a crisp, beauty design.\n                        </p>\n                        <p>\n                            Disclaimer though, for I am not really well in design. <b>I build this website for myself\n                            to sharpen my skills,</b> while being able to showcase my own capability in my journey\n                            in being a frontend developer. So, enjoy my neumorph playground!\n                        </p>\n                        <p className=\"AboutUs-Warning\">\n                            For now, it is just for display. Later, I will make it adjustable, so you\n                            may play around adjusting your preference and see the result <span role='img' aria-label='emoji'>😄</span>!\n                        </p>\n                    </div>\n                </div>\n            </main>\n        </React.Fragment>\n    );\n};\n\nexport default AboutUs;","import React from 'react';\n\n// Construct types for component props\ninterface InputProps {\n    type?: string;\n    value?: string;\n    onChange?: (newValue: string) => void;\n    label?: string;\n    className?: string;\n    inputClassName?: string;\n    labelClassName?: string;\n    placeholder?: string;\n}\n\nconst Input: React.FC<InputProps> = ({\n    type,\n    value = '',\n    onChange = () => {},\n    label = '',\n    className,\n    inputClassName,\n    labelClassName,\n    placeholder = '',\n}) => {\n    className = `Input-Wrapper${className ? ' ' + className : ''}`;\n    inputClassName = `Input-Container${inputClassName ? ' ' + inputClassName : ''}`;\n    labelClassName = `Input-Label${labelClassName ? ' ' + labelClassName : ''}`;\n\n    return (\n        <React.Fragment>\n            <div className={className}>\n                <input\n                    type=\"text\"\n                    value={value}\n                    onChange={({ currentTarget: {value} }) => onChange(value)}\n                    className={inputClassName}\n                    placeholder={placeholder}\n                />\n                <p\n                    className={labelClassName}\n                    data-has-value={!!value}\n                >{label}</p>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Input;","import React from 'react';\nimport {\n    Input,\n} from '../../components/CustomComponent';\n\n// Construct types for component props\ninterface DesignSystemProps {\n    \n}\n\nconst DesignSystem: React.FC<DesignSystemProps> = () => {\n    const [inputValue, setInputValue] = React.useState<string>('');\n    const updateInput = (newValue: string) => setInputValue(() => newValue);\n\n    return (\n        <React.Fragment>\n            <main className=\"DesignSystem-Screen\">\n                <div className=\"DesignSystem-Container\">\n                    <p className=\"DesignSystem-SectionTitle\">Input</p>\n                    <Input\n                        value={inputValue}\n                        onChange={updateInput}\n                        label='Label Here'\n                        placeholder='Input here'\n                    />\n                </div>\n            </main>\n        </React.Fragment>\n    );\n};\n\nexport default DesignSystem;","import React from 'react';\nimport {\n    IoIosFlask,\n} from 'react-icons/io';\nimport { IconContext } from \"react-icons\";\n\nconst NotFound = () => {\n    return (\n        <React.Fragment>\n            <main className=\"NotFound-Screen\">\n                <div className=\"NotFound-Title\">\n                    <IconContext.Provider value={{ className: 'Icon Icon-Tertiary Icon-NotFound' }}>\n                        <IoIosFlask />\n                    </IconContext.Provider>\n                    <p>You have wondered too far!</p>\n                    <IconContext.Provider value={{ className: 'Icon Icon-Tertiary Icon-NotFound' }}>\n                        <IoIosFlask />\n                    </IconContext.Provider>\n                </div>\n                <p>How about trying the other page instead?</p>\n            </main>\n        </React.Fragment>\n    );\n};\n\nexport default NotFound;","import React from 'react';\n\n// Construct types for component props\ninterface InProgressProps {\n    \n}\n\nconst InProgress: React.FC<InProgressProps> = () => {\n    return (\n        <React.Fragment>\n            <main className=\"NotFound-Screen\">\n                <div className=\"NotFound-Title\">\n                    <p>This page is a work of progress</p>\n                </div>\n            </main>\n        </React.Fragment>\n    );\n};\n\nexport default InProgress;","import React from 'react';\nimport {\n    Switch,\n    Route,\n} from 'react-router-dom';\n\n// Importing all main layout components\nimport {\n    Header,\n} from '../components';\n\n// Importing all main pages\nimport Home from '../pages/Home';\nimport AboutUs from '../pages/AboutUs';\nimport DesignSystem from '../pages/DesignSystem';\nimport NotFound from '../pages/404';\nimport InProgress from '../pages/InProgress';\n\nconst routes = [\n    {\n        path: \"/neumorph/about\",\n        exact: true,\n        main: () => <AboutUs />\n    },\n    {\n        path: \"/neumorph/design-system\",\n        exact: true,\n        main: () => <DesignSystem />\n    },\n    {\n        path: \"/neumorph/contact-me\",\n        exact: true,\n        main: () => <InProgress />\n    },\n    {\n        path: \"/neumorph/\",\n        exact: true,\n        main: () => <Home />\n    },\n    {\n        path: \"*\",\n        exact: false,\n        main: () => <NotFound />\n    },\n];\n\nconst Layout: React.FC = () => {\n    return (\n        <React.Fragment>\n            <div className=\"Layout-Wrapper\">\n                <Header />\n                <section className=\"Layout-Body\">\n                    <Switch>\n                        {\n                            routes.map((route, index) => (\n                                <Route\n                                    key={index}\n                                    path={route.path}\n                                    exact={route.exact}\n                                    children={<route.main />}\n                                />\n                            ))\n                        }\n                        {/* <Route path=\"/\" exact>\n                            <Home />\n                        </Route>\n                        <Route path=\"*\">\n                            <NotFound />\n                        </Route> */}\n                    </Switch>\n                </section>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Layout;","import React from 'react';\nimport './App.scss';\nimport {\n    BrowserRouter as Router,\n} from 'react-router-dom';\nimport Layout from './routers';\n\nfunction App() {\n    return (\n        <Router>\n            <Layout />\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n// serviceWorker.unregister();\n"],"sourceRoot":""}